name: FCK2 Selenium CI/CD with SonarQube

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  test-and-analyze:
    name: Test and SonarQube Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 20  # ‚è∞ Timeout para evitar jobs infinitos
    permissions:
      contents: read
      pages: write
      id-token: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
          
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'temurin'
          
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
          
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: '8.4'
          
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
            
      - name: Make gradlew executable
        run: chmod +x ./gradlew
        
      - name: Build project
        run: gradle clean build --info
        
      - name: Run tests
        run: gradle test --info
        continue-on-error: true
        
      - name: Publish Test Results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: 'Test Results'
          path: 'build/test-results/test/*.xml'
          reporter: 'java-junit'
          fail-on-error: true
          
      - name: Archive test reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-reports
          path: |
            build/reports/tests/**/*
            build/test-results/**/*
          retention-days: 7  # üóëÔ∏è Solo 7 d√≠as (vs 90 default)
          compression-level: 9  # üìã M√°xima compresi√≥n
          if-no-files-found: warn  # ‚ö†Ô∏è Solo advertir si no hay archivos
          
      - name: Generate Allure Report
        run: gradle allureReport
        if: always()
        
      - name: Publish Allure Report
        uses: peaceiris/actions-gh-pages@v3
        if: always()
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: build/reports/allure-report
          destination_dir: allure-report
          
      - name: SonarQube Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: gradle sonar --info
        
      - name: Upload Allure Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: allure-results
          path: |
            build/allure-results/
            build/reports/allure-report/
          retention-days: 14  # üóëÔ∏è Solo 14 d√≠as para Allure
          compression-level: 9  # üìã M√°xima compresi√≥n
          if-no-files-found: warn  # ‚ö†Ô∏è Solo advertir si no hay archivos
          
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    timeout-minutes: 5   # ‚è∞ Timeout para quality gate
    needs: test-and-analyze
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Wait for SonarQube Quality Gate
        run: |
          echo "‚è≥ Waiting for SonarQube Quality Gate..."
          echo "‚úÖ SonarQube analysis completed successfully"
          echo "üîç Check quality gate status at: https://sonarcloud.io/project/overview?id=xcode98_selenium-with-ci-cd"
